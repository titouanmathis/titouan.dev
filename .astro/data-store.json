[["Map",1,2,9,10,36,37,47,48,176,177],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.14.4","content-config-digest","3bb46ca4f9e94f1e","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"http://localhost:3000\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"always\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image/\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null],\"rehypePlugins\":[null,[null,{\"behavior\":\"wrap\"}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true,\"allowedDomains\":[]},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false}}","experiments",["Map",11,12,20,21,28,29],"001",{"id":11,"data":13,"body":15,"filePath":16,"digest":17,"legacyId":18,"deferredRender":19},{"title":14},"#001","import Experiments001 from '~/components/Experiments/Experiments001/Experiments001.vue';\n\n\u003CExperiments001 client:load />","src/content/experiments/001.mdx","fd56f3343ae8ae35","001.mdx",true,"002",{"id":20,"data":22,"body":24,"filePath":25,"digest":26,"legacyId":27,"deferredRender":19},{"title":23},"#002","import Experiments002 from '~/components/Experiments/Experiments002/Experiments002.vue';\n\n\u003CExperiments002 client:load />","src/content/experiments/002.mdx","f5074435f22d751c","002.mdx","003",{"id":28,"data":30,"body":32,"filePath":33,"digest":34,"legacyId":35,"deferredRender":19},{"title":31},"#003","import Experiments003 from '~/components/Experiments/Experiments003/Experiments003.vue';\n\n\u003CExperiments003 client:load />","src/content/experiments/003.mdx","78142b09295824e6","003.mdx","articles",["Map",38,39],"2023/12/20/dos-and-donts-of-redirects-with-htaccess",{"id":38,"data":40,"body":43,"filePath":44,"digest":45,"legacyId":46,"deferredRender":19},{"title":41,"description":42},"Do's and don'ts of redirects with .htaccess","Things to know when implementing redirects with Apache","import MetaInfo from '~/components/MetaInfo.vue';\nimport TableOfContent from '~/components/TableOfContent.vue';\n\n# Do's and don'ts of redirects with .htaccess\n\n\u003CMetaInfo class=\"block\">20/12/2023 in #http #apache #redirect\u003C/MetaInfo>\n\nI have spent many hours configuring thousands of redirects when migrating websites, following a redesign or a change of stack. In this article, I am sharing some of the do's and don'ts learned along the way and that I would recommend for anyone working on this kind of tasks to follow.\n\n\u003CTableOfContent open />\n\n## Basics of URL structure\n\nTo understand how to set up URL redirects, it's best to understand the structure of a URL and the terms used to describe each part. Here's a quick diagram that sums it up:\n\n\u003Cdiv class=\"group-leading-none\">\n\n```\nhttps://www.fqdn.com:443/blogs/?sort=latests#fragment\n└┬──┘   └─┬─────────┘└┬┘└─┬───┘└─┬─────────┘└───┬───┘\n └ scheme │      port ┘   │      │              └ fragment\n          │               │      └ query string\n          └ domain        └ path\n```\n\n\u003C/div>\n\nFor more details on URL structure, make sure to check [MDN's documentation](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL) and for front-end devs used to work with the `window.location` object, the following diagram can be used to compare with the previous one:\n\n\u003Cdiv class=\"group-leading-none\">\n\n```\n  ┌ protocol          ┌ port\n┌─┴──┐               ┌┴┐\nhttps://www.fqdn.com:443/blogs/?sort=latests#fragment\n│       └──┬───────┘   │└─┬──┘ └─┬─────────┘└─┬─────┘\n│       │  └ hostname  │  │      └ search     └ hash\n│       └──┬───────────┘  └ pathname\n│          └ host      │\n└──────────┬───────────┘\n           └ origin\n```\n\n\u003C/div>\n\n## Basics of redirects with Apache\n\nApache has 2 main directives which can be used to configure redirects:\n\n- `Redirect`\n- `RedirectMatch`\n\nThey can be used to define redirects from an old path to a new URL simply:\n\n```apacheconf\nRedirect /old-path https://fqdn.com/new-path\nRedirectMatch /old-path https://fqdn.com/new-path\n```\n\nBoth directives will default to a `302` temporary redirect, if you need a permanent one, make sure to specify the `301` status:\n\n```apacheconf\nRedirect 301 /old-path https://fqdn.com/new-path\nRedirectMatch 301 /old-path https://fqdn.com/new-path\n```\n\nThe `RedirectPermanent` directive can also be used instead of `Redirect 301`:\n\n```apacheconf\nRedirectPermanent /old-path https://fqdn.com/new-path\n```\n\nNote that the new URL can have a different domain than the original one, i.e. we can redirect from `domain-a.com` to `domain-b.com`.\n\n## Do’s and don’ts\n\n### Prefer specific redirects to overly generic rules\n\nIt's easier to specifically test redirected URLs when they're complete, rather than defining a matching pattern. You'll also have better control over the impact of your redirect rules on your site, and avoid false positives.\n\n```apacheconf\n# Do\nRedirectPermanent /blog/page/1 https://fqdn.com/\nRedirectPermanent /blog/page/2 https://fqdn.com/\nRedirectPermanent /blog/page/3 https://fqdn.com/\nRedirectPermanent /blog/page/4 https://fqdn.com/\n\n# Don't\nRedirectMatch /blog/page/* https://fqdn.com/\n```\n\n### `Redirect` directives may retain parts of the old path\n\nWhen a URL matches a `Redirect` directive (`Redirect`, `RedirectMatch`, `RedirectPermanent`), the part of the URL that doesn't match will be added to the redirect URL.\n\nThus, with the following configurations:\n\n```apacheconf\nRedirectPermanent /foo https://fqdn.com/redirected\n# or with RedirectMatch\nRedirectMatch 301 ^/foo https://fqdn.com/redirected\n```\n\nThe following redirects will happen:\n\n```\nhttps://fqdn.com/foo      → https://fqdn.com/redirected\nhttps://fqdn.com/foo/     → https://fqdn.com/redirected/\nhttps://fqdn.com/foo/bar  → https://fqdn.com/redirected/bar\nhttps://fqdn.com/foo/bar/ → https://fqdn.com/redirected/bar/\n```\n\nTo ensure that an exact URL redirects to another exact URL without keeping parts of the original URL, use the `RedirectMatch` directive with a `.*` pattern:\n\n```apacheconf\nRedirectMatch 301 ^/foo.* https://fqdn.com/redirected\n```\n\nThe following redirects will happen:\n\n```\nhttps://fqdn.com/fo       → https://fqdn.com/fo\nhttps://fqdn.com/foo      → https://fqdn.com/redirected\nhttps://fqdn.com/foo/     → https://fqdn.com/redirected\nhttps://fqdn.com/foo/bar  → https://fqdn.com/redirected\nhttps://fqdn.com/foo/bar/ → https://fqdn.com/redirected\n```\n\n### The order of redirect rules is important\n\nRedirect rules in the `.htaccess` file must be added from the most specific one to the most generic one. The first rule matching the request URL is followed and other rules are ignored.\n\nSo, with the following configuration:\n\n```apacheconf\nRedirectPermanent /foo https://fqdn.com/bar\nRedirectPermanent /foo/bar https://fqdn.com/foo/baz\n```\n\nThe URL `https://fqdn.com/foo/bar` will be redirected by the first redirect rule, while the second rule will never be evaluated.\n\nTo fix this problem, a simple trick is to sort your redirect rules in reverse alphabetical order:\n\n```apacheconf\nRedirectPermanent /foo/bar https://fqdn.com/foo/baz\nRedirectPermanent /foo https://fqdn.com/bar\n```\n\n### `Redirect` directives ignore URL parameters\n\nIf the URL that needs to be redirected contains URL parameters (e.g. `?search=keyword`), `Redirect` directives will have no effect on the request.\n\nFor example, with the following configuration:\n\n```apacheconf\nRedirectPermanent /foo/?search=news https://fqdn.com/fr/\n```\n\nA request with the `https://fqdn.com/foo?search=news` URL will not be handled.\n\nRedirects including URL parameters must be set up with `RewriteCond` and `RewriteRule`:\n\n```apacheconf\nRewriteCond %{QUERY_STRING} ^search=news$\nRewriteRule ^foo$ https://doo.com/? [L,R=301]\n```\n\nMake sure to enable the ´RewriteEngine´ mode before using ´RewriteCond´ directives:\n\n´´´apacheconf\nRewriteEngine On\nRewriteBase /\n´´´\n\n## Validating your `.htaccess` file\n\nBefore deploying your redirect rules in production, it is important to test and validate them. First because any syntax error in a ´.htaccess´ file will result in an error 500 when accessing the website. Second, to ensure that each rule send your users to the correct location.\n\n### online htaccess tester\n\nFor simple rules, you can use the very good and useful [htaccess tester](https://htaccess.madewithlove.com/) by [madewithlove](https://madewithlove.com/).\n\n### studiometa/test-redirection\n\nIf you have hundreds or more rules, I would recommend to try our [own tool](https://github.com/studiometa/cli-test-redirection) based on Docker, which can test redirects defined in a CSV file, with host mocking:\n\n```sh\n# Create your .htaccess file with redirections to test\nvim .htaccess\n\n# Create a CSV fiels containing 2 columns: from,to\nvim redirects.csv\n\n# Run the Docker image by linking the current directy to /app\ndocker run -it --rm -v $PWD:/app -e \"DOMAINS=fqdn.com www.fqdn.com\" studiometa/test-redirection redirects.csv\n```\n\nMake sure to check out the [GitHub repository](https://github.com/studiometa/cli-test-redirection) to learn more!","src/content/articles/2023/12/20/dos-and-donts-of-redirects-with-htaccess.mdx","079f8b98c1e29d59","2023/12/20/dos-and-donts-of-redirects-with-htaccess.mdx","notes",["Map",49,50,58,59,67,68,76,77,84,85,92,93,101,102,109,110,118,119,138,139,157,158],"2022/05/30/proxy-request-backend-nuxt3",{"id":49,"data":51,"body":54,"filePath":55,"digest":56,"legacyId":57,"deferredRender":19},{"title":52,"description":53},"Proxying API request to a backend with Nuxt 3","An example on how to send request to a backend with Nuxt 3 while avoiding CORS issues","# Proxying API request to a backend with Nuxt 3\n\n\u003Cdiv class=\"tracking-wide uppercase opacity-70\">\n  \u003Csmall>30/05/2022 in #Vue #Nuxt\u003C/small>\n\u003C/div>\n\nUse a catch-all server API endpoint `server/api/[...].js` and make sure to transfer required headers from the client to the backend.\n\n```js\nimport { createError, useBody, appendHeader } from 'h3';\n\nexport default defineEventHandler(async (event) => {\n  const config = useRuntimeConfig();\n\n  if (!config.apiBaseUrl) {\n    throw new Error('Missing `runtimeConfig.apiBaseUrl` configuration.');\n  }\n\n  const { method, url, headers } = event.req;\n  const body = method !== 'GET' && method !== 'HEAD' ? await useBody(event) : undefined;\n\n  try {\n    const response = await $fetch.raw(url, {\n      method,\n      baseURL: config.apiBaseUrl,\n      headers: {\n        'content-type': 'application/json',\n        cookie: headers.cookie,\n      },\n      body,\n    });\n\n    for (const header of ['set-cookie', 'cache-control']) {\n      if (response.headers.has(header)) {\n        appendHeader(event, header, response.headers.get(header));\n      }\n    }\n\n    return response._data;\n  } catch (error) {\n    return createError({\n      statusCode: error.response.status,\n      statusMessage: error.message,\n      data: error.data,\n    });\n  }\n});\n```","src/content/notes/2022/05/30/proxy-request-backend-nuxt3.mdx","e08d903ea54ada41","2022/05/30/proxy-request-backend-nuxt3.mdx","2022/06/20/batch-rename-files-with-zmv",{"id":58,"data":60,"body":63,"filePath":64,"digest":65,"legacyId":66,"deferredRender":19},{"title":61,"description":62},"Batch rename files with zmv in ZSH","Use the `zmv` utility from ZSH to easily rename multiple files.","# Batch rename files with `zmv` in ZSH\n\n\u003Cdiv class=\"tracking-wide uppercase opacity-70\">\n  \u003Csmall>20/06/2022 in #ZSH #scripts #terminal\u003C/small>\n\u003C/div>\n\nI just (re)discovered the `zmv` utility from ZSH which simplify renaming things from the command line:\n\n```sh\nzmv '(*).log' '$1.txt'\n```\n\nIt is not enabled by default, at least for me, so you might need to add the following line in your `~/.zshrc` file to be able to use it:\n\n```sh\nautoload -U zmv\n```\n\nIt also has some flags for some advanced usages:\n\n```sh\n# Dry run\nzmv -n '(*).log' '$1.txt'\n\n# Interactive mode\nzmv -i '(*).log' '$1.txt'\n\n# Verbose mode\nzmv -v '(*).log' '$1.txt'\n```","src/content/notes/2022/06/20/batch-rename-files-with-zmv.mdx","dfe58e2528d9e6d5","2022/06/20/batch-rename-files-with-zmv.mdx","2022/06/15/php-version-manager",{"id":67,"data":69,"body":72,"filePath":73,"digest":74,"legacyId":75,"deferredRender":19},{"title":70,"description":71},"A simple PHP version manager","A small ZSH function to easily switch PHP versions for CLI usage","# A simple PHP version manager\n\n\u003Cdiv class=\"tracking-wide uppercase opacity-70\">\n  \u003Csmall>15/06/2022 in #PHP #ZSH #scripts #terminal\u003C/small>\n\u003C/div>\n\nI have multiple versions of PHP installed with Homebrew on my computer and it has always been a nightmare to use a specific version in the terminal for different commands. For example, installing Composer dependencies with a specific PHP version:\n\n```sh\n/usr/bin/local/php73 $(which composer) install\n```\n\nI ended up writing a small ZSH function to easily switch from one version to another à la `nvm`. It is quite simple under the hood as it simply changes the content of the `$PATH` variable so that the `php` command points to the desired version.\n\nThe function can be used as follows:\n\n```sh\n# Use a specific version\npvm use 7.4\n\n# Use the system default version\npvm use system\n\n# Try to guess a version from a `composer.json` file up in the folder tree\npvm use\n\n# Display the current version\npvm current\n\n# List available versions\npvm list\npvm ls\n```\n\nThe `pvm use` command can be used without specifying a version, it will try to find a `composer.json` file up in the folder tree and guess a PHP version from its dependencies.\n\n## Disclaimer\n\nThis is a script created specificly to work on my local environment, I can not guarantee that it will work correctly on any other environment. Use it at your own risk.\n\n## The script\n\nYou will find the script below, to start using it, add it to your `~/.zshrc` file or create a separate file and add the following to your `~/.zshrc`:\n\n```sh\nsource /path/to/pvm.zsh\n```\n\nYou also will need to have multiple versions of PHP installed with [Homebrew](https://brew.sh/) as well as the [`jq`](https://stedolan.github.io/jq/) CLI:\n\n```sh\nbrew install jq \\\n    shivammathur/php/php \\\n    shivammathur/php/php@5.6 \\\n    shivammathur/php/php@7.0 \\\n    shivammathur/php/php@7.1 \\\n    shivammathur/php/php@7.2 \\\n    shivammathur/php/php@7.3 \\\n    shivammathur/php/php@7.4 \\\n    shivammathur/php/php@8.0\n```\n\nHere is the script:\n\n```sh\n#!/bin/zsh\n\n# Alias PHP version to Brew versions\nfunction pvm() {\n    zparseopts -D -E -a opts -verbose::=verbose v::=version -version::=version\n    VERSION='0.0.2'\n    brew_prefix=$(brew --prefix)\n\n    function log() {\n        if [[ $verbose ]]; then\n            echo $1\n        fi\n    }\n\n    function get_php_bin_path() {\n        ls -d $brew_prefix/Cellar/php*/$1*/bin\n    }\n\n    function get_php_versions() {\n        ls -d $brew_prefix/Cellar/php*/* | grep -E -o '/[0-9]+.[0-9]+' | sed -E 's#/##'\n    }\n\n    function set_php_version() {\n        _current_php_version=$(pvm current)\n        _current_path=$(get_php_bin_path \"$_current_php_version\")\n        _old_path=$(php -r \"echo str_replace('$_current_path:', '', '$PATH');\")\n\n        if [[ -z $1 ]]; then\n            export PATH=\"$_old_path\"\n            return\n        fi\n\n        PHP_VERSIONS=\"$(get_php_versions)\"\n\n        _version_exists=\"$(php -r \"echo preg_match('/^$1$/m', '$PHP_VERSIONS');\")\"\n\n        if [[ $_version_exists == \"0\" ]]; then\n            echo \"Could not find PHP version $1, is it installed?\";\n            return\n        fi\n\n        _new_path=$(get_php_bin_path $1)\n        _old_path=$(php -r \"echo str_replace('$_new_path:', '', '$_old_path');\")\n        export PATH=\"$_new_path:$_old_path\"\n    }\n\n    log \"pvm@$VERSION\"\n\n    if [[ $1 == 'current' ]]; then\n        local PHP_VERSION=$(php -v | grep -Eo 'PHP [0-9]+.[0-9]+')\n        echo ${PHP_VERSION/PHP /};\n        return;\n    fi\n\n    if [[ $1 == 'use' ]]; then\n        if [[ $2 == 'system' ]]; then\n            log 'use system'\n            set_php_version\n        elif [[ -n $2 ]]; then\n            log \"use $2\"\n            set_php_version $2\n        else\n            composerjson_path=$(_find_up composer.json | tr -d '[:space:]')\n            if [[ -a $composerjson_path/composer.json ]]; then\n                pvm_version=$(cat $composerjson_path/composer.json | jq '.require.php' | grep -Eo '[0-9](.[0-9])?' | head -n 1)\n                log \"use v$pvm_version from composer.json\"\n                if [[ -n $pvm_version ]]; then\n                    set_php_version $pvm_version\n                    return\n                fi\n            fi\n        fi\n        return\n    fi\n\n    if [[ $1 == 'list' || $1 == 'ls' ]]; then\n        get_php_versions\n        return\n    fi\n\n    if [[ $version == '--version' || $version == '-v' ]]; then\n        echo $VERSION\n        return\n    fi;\n\n    echo \"pvm $VERSION\nA fast and simple PHP manager\n\nUSAGE:\n    pvm \u003CSUBCOMMAND>\n\nFLAGS:\n    -h, --help\n        Prints help information\n\n    -v, --version\n        Prints version information\n\nSUBCOMMANDS:\n    current       Print the current PHP version\n    use [version] Change PHP version\n    list          List all available PHP versions [alias: ls]\n\"\n}\n```","src/content/notes/2022/06/15/php-version-manager.mdx","bc302b96a9131124","2022/06/15/php-version-manager.mdx","2022/11/03/applying-patch-from-github",{"id":76,"data":78,"body":80,"filePath":81,"digest":82,"legacyId":83,"deferredRender":19},{"title":79},"Applying a patch from GitHub with curl","import MetaInfo from '~/components/MetaInfo.vue';\n\n# Applying a patch from GitHub with curl\n\n\u003CMetaInfo class=\"block\">03/11/2022 in #terminal #git\u003C/MetaInfo>\n\nI was looking for a way to apply patches to a Git repository without having to download a `.patch` file. It turns out it can easily be done with `curl`:\n\n```sh\n# Apply changes from a PR to your repository\ncurl https://github.com/org/project/pull/1.patch | git apply -v\n\n# Apply changes from a commit to your repository\ncurl https://github.com/org/project/commit/e765432.patch | git apply -v\n```\n\nEven better in some use cases, you can directly apply changes and commit them directly with `git am`:\n\n```sh\n# Cherry-pick commits from a PR to your local repository\ncurl https://github.com/org/project/pull/1.patch | git am --signoff --keep\n\n# Cherry-pick a commit to your repository\ncurl https://github.com/org/project/commit/e765432.patch | git am --signoff --keep\n```\n\nThe `--signoff` flag will add a line about the original author of the commit while `--keep` will avoid striping content in brackets from the commit message (see [this Stackoverflow answer](https://stackoverflow.com/a/66593199/14997312) for more details).","src/content/notes/2022/11/03/applying-patch-from-github.mdx","69e38d7d969febe0","2022/11/03/applying-patch-from-github.mdx","2022/01/01/new-year-new-site",{"id":84,"data":86,"body":88,"filePath":89,"digest":90,"legacyId":91,"deferredRender":19},{"title":87},"New year, new site","# New year, new site\n\n\u003Cdiv class=\"tracking-wide uppercase opacity-70\">\n  \u003Csmall>01/01/2022 in #Random\u003C/small>\n\u003C/div>\n\nI last updated my website 5 years ago, it was time to freshen it up a bit. I discovered [Iles](https://github.com/ElMassimo/iles) not so long ago and wanted to give it a go for 2 main reasons:\n\n- Use a minimal amount of JavaScript\n- Test Vue 3 and its composition API\n\nBoth Iles and the composition API are fun to use, I'd recommend them!","src/content/notes/2022/01/01/new-year-new-site.mdx","40d3f194e278d1bc","2022/01/01/new-year-new-site.mdx","2023/05/29/deepl-alfred-workflow",{"id":92,"data":94,"body":97,"filePath":98,"digest":99,"legacyId":100,"deferredRender":19},{"title":95,"description":96},"An Alfred Workflow for Deepl","A ZSH function to use Deepl from the command line, along with an Alfred Workflow to quickly translate selected text.","import MetaInfo from '~/components/MetaInfo.vue';\n\n# An Alfred Workflow for Deepl\n\n\u003CMetaInfo class=\"block\">29/05/2023 in #terminal #deepl #zsh #alfred\u003C/MetaInfo>\n\nI often use Deepl via its macOS application to translate various content, but it some times felt too slow for simple translations. I wanted an Alfred Workflow which could do the same translation a little bit quicker with a dedicated hotkey, so I ended up writing a small ZSH function and a corresponding Alfred Workflow.\n\n## A ZSH function\n\nHere is the ZSH function I ended up writing:\n\n```sh\n#!/usr/bin/env zsh\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nif [[ \"${TRACE-0}\" == \"1\" ]]; then\n  set -o xtrace\nfi\n\nif [[ \"${1-}\" =~ ^-*h(elp)?$ || $# == 0 ]]; then\n  echo '\ndeepl@0.0.0\n\nTranslate a string with Deepl free API. You will need to define a\nglobal DEEPL_API_TOKEN with your Deepl API token.\n\nUsage:\n\n    deepl [--from \u003Cfrom>] --to \u003Cto> \u003CVALUE>\n    deepl [-f \u003Cfrom>] -t \u003Cto> \u003CVALUE>\n\nExample:\n\n    deepl --to fr Hello World\n'\n  exit\nfi\n\nmain() {\n  # Parse options with ZSH zparseopts utility\n  zparseopts -E -D -- \\\n    -from:=FROM f:=FROM \\\n    -to:=TO t:=TO\n\n  # Clean up option names from the values\n  FROM=\"${FROM/--from =/}\"\n  FROM=\"${FROM/--from /}\"\n  FROM=\"${FROM/-f =/}\"\n  FROM=\"${FROM/-f /}\"\n  TO=\"${TO/--to =/}\"\n  TO=\"${TO/--to /}\"\n  TO=\"${TO/-t =/}\"\n  TO=\"${TO/-t /}\"\n\n  # Make sure Deepl API token is defined\n  if [[ ! ${DEEPL_API_TOKEN:-} ]]\n  then\n    echo \"Error: DEEPL_API_TOKEN not defined.\"\n    exit 1\n  fi\n\n  # Make sure `jq` is installed\n  if ! [[ -x \"$(which jq)\" ]]; then\n    echo \"Error: Missing `jq` dependency. Install it with `brew install jq`.\"\n    exit\n  fi\n\n  # Translate the given string\n  curl -s -X POST \"https://api-free.deepl.com/v2/translate\" \\\n    -H \"Authorization: DeepL-Auth-Key $DEEPL_API_TOKEN\" \\\n    -d \"text=$@\" \\\n    -d \"target_lang=${TO:-en}\" \\\n    -d \"source_lang=$FROM\" | jq -r \".translations[0].text\"\n}\n\nmain \"$@\"\n```\n\nTo use it, place it in a file within your `$PATH` and make sure it can be executed. Copy the script above and then use the following commands:\n\n```sh\n# Paste the content of the script in a `deepl` file\n$ pbpaste > /usr/local/bin/deepl\n# Allow the file to be executed\n$ chmod +x /usr/local/bin/deepl\n```\n\nYou will then be able to use it from your terminal:\n\n```sh\n$ deepl --to fr 'Hello world!'\nBonjour à tous !\n$ deepl --to de 'Hello world!'\nHallo Welt!\n```\n\nThe source language is guessed by Deepl, but you can force it with the `--from` parameter. The default target language is English, but you can change it by editing the `target_lang` parameter in the script:\n\n```diff\n-    -d \"target_lang=${TO:-en}\" \\\n+    -d \"target_lang=${TO:-fr}\" \\\n```\n\n## An Alfred Workflow for Deepl\n\nFor the Alfred Workflow, I used a simple \"Script filter\" object with the following script:\n\n```sh\n# My DEEPL_API_TOKEN is stored in a `.localrc` file, it could be\n# managed with Alfred own environment variables settings.\nsource ~/.localrc\n\n# Print a JSON for Alfred\nfunction print_alfred_output() {\n  local input=\"$(\u003C /dev/stdin)\";\n  printf '\n{\n  \"items\": [\n    {\n      \"title\": \"%s\",\n      \"arg\": \"%s\",\n      \"subtitle\": \"Copy with ⌘+C, display with ⏎\",\n      \"mods\": {\n        \"cmd\": {\n          \"subtitle\" : \"Copy the result with ⌘+C\"\n        }\n      }\n    }\n  ]\n}' \"$input\" \"$input\"\n}\n\n/usr/local/bin/deepl \"{query}\" | print_alfred_output\n```\n\nMake sure to enable the debounce feature to avoid calling the API for each new character typed in Alfred. In the \"Script filter\" settings, go to \"Run behaviour\" and in the section \"Queue Delay\" select the \"Automatic delay after last character typed\" value.\n\nI added two more objects to my workflow:\n\n- A \"Hotkey\" object before the \"Script filter\" to be able to translate any selected text quickly\n- A \"Large type\" object after the \"Script filter\", so I can display the translated string in full screen if it does not fit in Alfred's box\n\n\u003Cdiv style=\"max-width: 633px;\">\n\n![-](/2023/05/29/workflow-usage.png)\n\n\u003C/div>","src/content/notes/2023/05/29/deepl-alfred-workflow.mdx","b38479e3f03c1d99","2023/05/29/deepl-alfred-workflow.mdx","2022/07/22/redirecting-correctly-with-the-location-header",{"id":101,"data":103,"body":105,"filePath":106,"digest":107,"legacyId":108,"deferredRender":19},{"title":104},"Redirecting with the `Location` header","# Redirecting with the `Location` header\n\n\u003Cdiv class=\"tracking-wide uppercase opacity-70\">\n  \u003Csmall>22/07/2022 in #http #TIL #Nuxt\u003C/small>\n\u003C/div>\n\nI was stuck with a redirection not happening in a Nuxt middleware on a recent project:\n\n```js\nexport default defineNuxtRouteMiddleware((from, to) => {\n  const { isLoggedIn } = useAuth();\n\n  if (!isLoggedIn()) {\n    return navigateTo('/login', {\n      redirectCode: 401,\n    });\n  }\n});\n```\n\nWhen trying to access a page without being logged in, instead of being redirected, the browser was displaying a message \"Redirecting to /login\". It turns out that using the `401` (unauthorized)status code was blocking the redirection specified in the response `Location` header. [The documentation on MDN](https://developer.mozilla.org/en-US/docs/web/http/headers/location) is quite clear on the subject:\n\n> The `Location` response header indicates the URL to redirect a page to. It only provides a meaning when served with a `3xx` (redirection) or `201` (created) status response.\n\nChanging the `redirectCode` value from `401` to `302` (found) fixed the issue:\n\n```diff\n  export default defineNuxtRouteMiddleware((from, to) => {\n    const { isLoggedIn } = useAuth();\n\n    if (!isLoggedIn()) {\n      return navigateTo('/login', {\n-       redirectCode: 401,\n+       redirectCode: 302,\n      });\n    }\n  });\n```\n\nAlthough, I am not sure if this is the correct status code for an authentication middleware.","src/content/notes/2022/07/22/redirecting-correctly-with-the-location-header.mdx","239c7b51c9c4c65d","2022/07/22/redirecting-correctly-with-the-location-header.mdx","2025/09/30/fixing-numbers-alignment-with-css",{"id":109,"data":111,"body":114,"filePath":115,"digest":116,"legacyId":117,"deferredRender":19},{"title":112,"description":113},"Fixing numbers alignment with CSS","On how to use CSS OpenType features to fix numbers alignment in table layout and other numbers UI.","import MetaInfo from '~/components/MetaInfo.vue';\nimport Preview from '~/components/Preview.vue';\nimport PreviewPlayground from '~/components/PreviewPlayground.vue';\nimport demoBugTwig from './demo-bug.twig?raw';\nimport demoFixedTwig from './demo-fixed.twig?raw';\nimport demoJs from './demo.js?raw';\nimport demoCss from './demo.css?raw';\n\n# Fixing numbers alignment with CSS\n\n\u003CMetaInfo class=\"block\">29/30/2025 in #css\u003C/MetaInfo>\n\nWhile working on a demo for the [Action](https://ui.studiometa.dev/-/components/Action/) and [DataModel](https://ui.studiometa.dev/-/components/DataBind/) components from [@studiometa/ui](https://ui.studiometa.dev) involving an `\u003Cinput type=\"date\">` element, I stumbled upon a small issue I often encounter when working with numbers: small layout shifts when the number changes.\n\n## The issue\n\nIn the example below, adding or removing a day from the date will slightly change the width of the `\u003Cinput type=\"date\">` element.\n\n\u003CPreviewPlayground\n  client:visible\n  html={demoBugTwig}\n  script={demoJs}\n  css={demoCss}>\u003C/PreviewPlayground>\n\nIf you do not see the small layout shifts in the demo above, the following video might be more explicit:\n\n\u003Cdiv class=\"overflow-hidden rounded max-w-lg\">\n  \u003Cvideo muted autoplay loop playsinline class=\"dark:hidden scale-105\">\n    \u003Csource src=\"/2025/09/30/input-glitch-light.mp4\" type=\"video/mp4\" />\n  \u003C/video>\n  \u003Cvideo muted autoplay loop playsinline class=\"hidden dark:block scale-105\">\n    \u003Csource src=\"/2025/09/30/input-glitch.mp4\" type=\"video/mp4\" />\n  \u003C/video>\n\u003C/div>\n\nThis issue can also be seen when displaying a list of numbers, where the line endings are not aligned, even though they contain the same number of characters.\n\n\u003CPreview class=\"p-10 max-w-lg\">\n  \u003Cdiv class=\"flex gap-4 justify-center\">\n    \u003Cdiv>\n      \u003Cdiv>17906\u003C/div>\n      \u003Cdiv>50087\u003C/div>\n      \u003Cdiv>47395\u003C/div>\n      \u003Cdiv>63327\u003C/div>\n      \u003Cdiv>43013\u003C/div>\n      \u003Cdiv>20560\u003C/div>\n      \u003Cdiv>47430\u003C/div>\n      \u003Cdiv>27118\u003C/div>\n      \u003Cdiv>59888\u003C/div>\n      \u003Cdiv>28934\u003C/div>\n    \u003C/div>\n    \u003Cdiv class=\"text-center\">\n      \u003Cdiv>21899\u003C/div>\n      \u003Cdiv>65701\u003C/div>\n      \u003Cdiv>52334\u003C/div>\n      \u003Cdiv>90941\u003C/div>\n      \u003Cdiv>86553\u003C/div>\n      \u003Cdiv>72253\u003C/div>\n      \u003Cdiv>48722\u003C/div>\n      \u003Cdiv>77162\u003C/div>\n      \u003Cdiv>50158\u003C/div>\n      \u003Cdiv>10179\u003C/div>\n    \u003C/div>\n    \u003Cdiv class=\"text-right\">\n      \u003Cdiv>17906\u003C/div>\n      \u003Cdiv>50087\u003C/div>\n      \u003Cdiv>47395\u003C/div>\n      \u003Cdiv>63327\u003C/div>\n      \u003Cdiv>43013\u003C/div>\n      \u003Cdiv>20560\u003C/div>\n      \u003Cdiv>47430\u003C/div>\n      \u003Cdiv>27118\u003C/div>\n      \u003Cdiv>59888\u003C/div>\n      \u003Cdiv>28934\u003C/div>\n    \u003C/div>\n  \u003C/div>\n\u003C/Preview>\n\n## The solution\n\nThe solution is a feature of the OpenType format called `tnum` ([wiki](https://en.wikipedia.org/wiki/List_of_typographic_features#Features_intended_for_digits_and_math)), which enables tabular figures. This means that all numbers will have the same width, preventing any misalignment or small layout shifts.\n\nThis can be enabled with [Tailwind CSS](https://tailwindcss.com/) by using the [`tabular-nums` class](https://tailwindcss.com/docs/font-variant-numeric#using-tabular-figures):\n\n```diff\n-  \u003Cdiv class=\"flex gap-10 justify-center\">\n+  \u003Cdiv class=\"flex gap-10 justify-center tabular-nums\">\n```\n\nOr directly in CSS by using the [`font-variant-numeric` property](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric):\n\n```css\n.tabular-nums {\n  font-variant-numeric: tabular-nums;\n}\n```\n\nAdding the `tabular-nums` class to both our demos fixes them: numbers are aligned, and changing them does not trigger a layout shift.\n\nOur columns of number are nicely aligned:\n\n\u003CPreview class=\"p-10 max-w-lg\">\n  \u003Cdiv class=\"flex gap-4 justify-center tabular-nums\">\n    \u003Cdiv>\n      \u003Cdiv>17906\u003C/div>\n      \u003Cdiv>50087\u003C/div>\n      \u003Cdiv>47395\u003C/div>\n      \u003Cdiv>63327\u003C/div>\n      \u003Cdiv>43013\u003C/div>\n      \u003Cdiv>20560\u003C/div>\n      \u003Cdiv>47430\u003C/div>\n      \u003Cdiv>27118\u003C/div>\n      \u003Cdiv>59888\u003C/div>\n      \u003Cdiv>28934\u003C/div>\n    \u003C/div>\n    \u003Cdiv class=\"text-center\">\n      \u003Cdiv>21899\u003C/div>\n      \u003Cdiv>65701\u003C/div>\n      \u003Cdiv>52334\u003C/div>\n      \u003Cdiv>90941\u003C/div>\n      \u003Cdiv>86553\u003C/div>\n      \u003Cdiv>72253\u003C/div>\n      \u003Cdiv>48722\u003C/div>\n      \u003Cdiv>77162\u003C/div>\n      \u003Cdiv>50158\u003C/div>\n      \u003Cdiv>10179\u003C/div>\n    \u003C/div>\n    \u003Cdiv class=\"text-right\">\n      \u003Cdiv>17906\u003C/div>\n      \u003Cdiv>50087\u003C/div>\n      \u003Cdiv>47395\u003C/div>\n      \u003Cdiv>63327\u003C/div>\n      \u003Cdiv>43013\u003C/div>\n      \u003Cdiv>20560\u003C/div>\n      \u003Cdiv>47430\u003C/div>\n      \u003Cdiv>27118\u003C/div>\n      \u003Cdiv>59888\u003C/div>\n      \u003Cdiv>28934\u003C/div>\n    \u003C/div>\n  \u003C/div>\n\u003C/Preview>\n\nThe `\u003Cinput type=\"date\">` element will not have its width changed when its value is updated:\n\n\u003CPreviewPlayground\n  client:visible\n  html={demoFixedTwig}\n  script={demoJs}\n  css={demoCss}>\u003C/PreviewPlayground>\n\n## Links\n\nTo go further, make sure to visit the following links:\n\n- [Documentation on OpenType font features](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_fonts/OpenType_fonts_guide)\n- [Documentation for the `font-variant-numeric` property](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric)\n- [Documentation for the `tabular-nums` class of Tailwind CSS](https://tailwindcss.com/docs/font-variant-numeric#using-tabular-figures)\n\nAnd to learn more on the components used for the date demo:\n\n- [Documentation for the `Action` component](https://ui.studiometa.dev/-/components/Action/)\n- [Documentation for the `DataBind` family of components](https://ui.studiometa.dev/-/components/DataBind/)","src/content/notes/2025/09/30/fixing-numbers-alignment-with-css/index.mdx","c76b65ca7101956a","2025/09/30/fixing-numbers-alignment-with-css/index.mdx","2025/08/26/lsp-oxlint-in-sublime-text",{"id":118,"data":120,"body":123,"filePath":124,"digest":125,"rendered":126,"legacyId":137},{"title":121,"description":122},"Using Oxlint LSP server in Sublime Text","Configuration to enable Oxlint's LSP server in Sublime Text with the Sublime LSP package.","import MetaInfo from '~/components/MetaInfo.vue';\n\n# Using Oxlint LSP server in Sublime Text\n\n\u003CMetaInfo class=\"block\">26/08/2025 in #sublimetext #lsp\u003C/MetaInfo>\n\nThe [Sublime LSP package](https://lsp.sublimetext.io/) brings the power of LSP servers in Sublime Text, with support for many languages and tools: ESLint, Markdown, TypeScript, Tailwind CSS, etc.\n\nWe have been using [Oxlint](https://oxc.rs/docs/guide/usage/linter.html) in our [@studiometa/js-toolkit project](https://github.com/studiometa/js-toolkit) to speed up linting and reduce configuration complexity with TypeScript, but I was missing the instant and integrated feedback from the [ESLint LSP server](https://github.com/sublimelsp/LSP-eslint) when editing files.\n\nWith some digging, I found out that it is easy to add a custom LSP server, and the `oxlint` NPM package is shipped with the language server binary. I added the following configuration in my Sublime LSP settings:\n\n```json\n{\n  \"clients\": {\n    \"LSP-oxlint\": {\n      \"enabled\": true,\n      \"command\": [\"/opt/homebrew/bin/npx\", \"-y\", \"--package=oxlint\", \"-c\", \"'oxc_language_server'\"],\n      \"selector\": \"source.js | source.ts\"\n    }\n  }\n}\n```\n\nI now have code quality reports for Oxlint directly in Sublime Text, with code actions and all the language server other tools available.\n\n![-](/2025/08/26/oxlint-lsp-in-sublime-text.png)","src/content/notes/2025/08/26/lsp-oxlint-in-sublime-text.md","2e04c824a0b627bc",{"html":127,"metadata":128},"\u003Cp>import MetaInfo from ’~/components/MetaInfo.vue’;\u003C/p>\n\u003Ch1 id=\"using-oxlint-lsp-server-in-sublime-text\">\u003Ca href=\"#using-oxlint-lsp-server-in-sublime-text\">Using Oxlint LSP server in Sublime Text\u003C/a>\u003C/h1>\n\u003Cp>\u003Cmetainfo class=\"block\">26/08/2025 in #sublimetext #lsp\u003C/metainfo>\u003C/p>\n\u003Cp>The \u003Ca href=\"https://lsp.sublimetext.io/\">Sublime LSP package\u003C/a> brings the power of LSP servers in Sublime Text, with support for many languages and tools: ESLint, Markdown, TypeScript, Tailwind CSS, etc.\u003C/p>\n\u003Cp>We have been using \u003Ca href=\"https://oxc.rs/docs/guide/usage/linter.html\">Oxlint\u003C/a> in our \u003Ca href=\"https://github.com/studiometa/js-toolkit\">@studiometa/js-toolkit project\u003C/a> to speed up linting and reduce configuration complexity with TypeScript, but I was missing the instant and integrated feedback from the \u003Ca href=\"https://github.com/sublimelsp/LSP-eslint\">ESLint LSP server\u003C/a> when editing files.\u003C/p>\n\u003Cp>With some digging, I found out that it is easy to add a custom LSP server, and the \u003Ccode>oxlint\u003C/code> NPM package is shipped with the language server binary. I added the following configuration in my Sublime LSP settings:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"clients\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"LSP-oxlint\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"enabled\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/opt/homebrew/bin/npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"--package=oxlint\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-c\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"'oxc_language_server'\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"selector\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"source.js | source.ts\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I now have code quality reports for Oxlint directly in Sublime Text, with code actions and all the language server other tools available.\u003C/p>\n\u003Cp>\u003Cimg src=\"/2025/08/26/oxlint-lsp-in-sublime-text.png\" alt=\"-\">\u003C/p>",{"headings":129,"localImagePaths":133,"remoteImagePaths":134,"frontmatter":135,"imagePaths":136},[130],{"depth":131,"slug":132,"text":121},1,"using-oxlint-lsp-server-in-sublime-text",[],[],{"title":121,"description":122},[],"2025/08/26/lsp-oxlint-in-sublime-text.md","2025/08/26/alfred-workflow-for-your-ssh-aliases",{"id":138,"data":140,"body":143,"filePath":144,"digest":145,"rendered":146,"legacyId":156},{"title":141,"description":142},"An Alfred Workflow for SSH aliases","A workflow to quickly open a connection to your SSH aliases","import MetaInfo from '~/components/MetaInfo.vue';\n\n# An Alfred Workflow for SSH aliases\n\n\u003CMetaInfo class=\"block\">26/08/2025 in #terminal #ssh #alfred\u003C/MetaInfo>\n\nAlthough I was already using the [good SSH plugin](https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh/README.md) from [Oh My ZSH](https://ohmyz.sh/) to provide alias-based autocompletion, I wanted to be able to access my configured aliases from [Alfred](https://alfred.app/) for its ability to remember often used options, so I created a workflow.\n\nThe workflow is tiny and is made of a script filter input and a run script action.\n\n![-](/2025/08/26/alfred-ssh.png)\n\nThe input script is a shell script using `jq` to format the Alfred output as JSON.\n\n```sh\ncat ~/.ssh/config \\\n  | grep -E \"^Host \" \\\n  | sed 's/Host //' \\\n  | xargs -I _ echo '{\"title\": \"_\", \"uid\": \"_\", \"arg\": \"_\"}' \\\n  | jq -s '{ items: . }'\n```\n\n![-](/2025/08/26/alfred-ssh-input.png)\n\nThe action script opens a new [WezTerm](https://wezterm.org/) window with a custom command to start, receiving the `{query}` from the input script.\n\n```sh\nopen -a wezterm --new --args start ssh {query}\n```\n\nIf you use another terminal application, you should be able to find a way to setup the same kind of opening with a quick search, be it Google, ChatGPT or Claude.\n\n![-](/2025/08/26/alfred-ssh-action.png)\n\nEt voilà, I can connect to my servers in seconds:\n\n\u003Cdiv style=\"max-width: 36em; margin: auto;\">\n\n![-](/2025/08/26/alfred-ssh-result.png)\n\n\u003C/div>","src/content/notes/2025/08/26/alfred-workflow-for-your-ssh-aliases.md","bfcbadaf83149b0f",{"html":147,"metadata":148},"\u003Cp>import MetaInfo from ’~/components/MetaInfo.vue’;\u003C/p>\n\u003Ch1 id=\"an-alfred-workflow-for-ssh-aliases\">\u003Ca href=\"#an-alfred-workflow-for-ssh-aliases\">An Alfred Workflow for SSH aliases\u003C/a>\u003C/h1>\n\u003Cp>\u003Cmetainfo class=\"block\">26/08/2025 in #terminal #ssh #alfred\u003C/metainfo>\u003C/p>\n\u003Cp>Although I was already using the \u003Ca href=\"https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh/README.md\">good SSH plugin\u003C/a> from \u003Ca href=\"https://ohmyz.sh/\">Oh My ZSH\u003C/a> to provide alias-based autocompletion, I wanted to be able to access my configured aliases from \u003Ca href=\"https://alfred.app/\">Alfred\u003C/a> for its ability to remember often used options, so I created a workflow.\u003C/p>\n\u003Cp>The workflow is tiny and is made of a script filter input and a run script action.\u003C/p>\n\u003Cp>\u003Cimg src=\"/2025/08/26/alfred-ssh.png\" alt=\"-\">\u003C/p>\n\u003Cp>The input script is a shell script using \u003Ccode>jq\u003C/code> to format the Alfred output as JSON.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cat\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ~/.ssh/config\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#B392F0\"> grep\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -E\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"^Host \"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#B392F0\"> sed\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 's/Host //'\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#B392F0\"> xargs\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -I\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> _\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '{\"title\": \"_\", \"uid\": \"_\", \"arg\": \"_\"}'\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#B392F0\"> jq\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -s\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '{ items: . }'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cimg src=\"/2025/08/26/alfred-ssh-input.png\" alt=\"-\">\u003C/p>\n\u003Cp>The action script opens a new \u003Ca href=\"https://wezterm.org/\">WezTerm\u003C/a> window with a custom command to start, receiving the \u003Ccode>{query}\u003C/code> from the input script.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -a\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> wezterm\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --args\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> start\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ssh\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> {query}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you use another terminal application, you should be able to find a way to setup the same kind of opening with a quick search, be it Google, ChatGPT or Claude.\u003C/p>\n\u003Cp>\u003Cimg src=\"/2025/08/26/alfred-ssh-action.png\" alt=\"-\">\u003C/p>\n\u003Cp>Et voilà, I can connect to my servers in seconds:\u003C/p>\n\u003Cdiv style=\"max-width: 36em; margin: auto;\">\n\u003Cp>\u003Cimg src=\"/2025/08/26/alfred-ssh-result.png\" alt=\"-\">\u003C/p>\n\u003C/div>",{"headings":149,"localImagePaths":152,"remoteImagePaths":153,"frontmatter":154,"imagePaths":155},[150],{"depth":131,"slug":151,"text":141},"an-alfred-workflow-for-ssh-aliases",[],[],{"title":141,"description":142},[],"2025/08/26/alfred-workflow-for-your-ssh-aliases.md","2023/03/10/basic-auth-middleware-nuxt-3",{"id":157,"data":159,"body":162,"filePath":163,"digest":164,"rendered":165,"legacyId":175},{"title":160,"description":161},"A simple Basic Auth middleware for Nuxt 3","A quick implementation of the basic authentication scheme with a server middleware and runtime config for Nuxt 3","# A simple Basic Auth middleware for Nuxt 3\n\n\u003Cdiv class=\"tracking-wide uppercase opacity-70\">\u003Csmall>10/03/2023 in #Vue #Nuxt\u003C/small>\u003C/div>\n\nWe often find ourselves needing to protect the access to development environment to avoid unwanted visitors. We use the [Basic authentication scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#basic_authentication_scheme), which is quite simple to configure when working with an Apache server.\n\nFor our Nuxt 3 projects, we implemented this feature with a simple [server middleware](https://nuxt.com/docs/guide/directory-structure/server#server-middleware) and a [runtime config](https://nuxt.com/docs/guide/going-further/runtime-config) to define the valid credentials.\n\n**nuxt.config.ts**\n\n```ts\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    basicAuth: '',\n  },\n});\n```\n\n**server/middleware/basic-auth.ts**\n\n```ts\nimport { appendHeader, createError, getHeader } from 'h3';\n\nfunction mapCredentialsToBasicAuthHeaders(multipleCredentials: string): string[] {\n  return multipleCredentials.split('\\n').map((credentials) => `Basic ${btoa(credentials)}`);\n}\n\nexport default defineEventHandler((event) => {\n  const { basicAuth } = useRuntimeConfig();\n\n  // If `basicAuth` is empty, do not prompt for authentication\n  if (!basicAuth) {\n    return;\n  }\n\n  // Format our credentials to their corresponding header:\n  // `user:pass` becomes `Basic dXNlcjpwYXNz`\n  const validAuthHeaders = mapCredentialsToBasicAuthHeaders(basicAuth);\n  const authHeader = getHeader(event, 'authorization');\n\n  // If the given authentication header is valid, do not prompt for authentication\n  if (authHeader && validAuthHeaders.some((validAuthHeader) => validAuthHeader === authHeader)) {\n    return;\n  }\n\n  // Set the `www-authenticate` header to prompt for authentication\n  // The realm attribute can be used to customize the message shown to the user\n  appendHeader(event, 'www-authenticate', 'Basic realm=\"Identification\"');\n  throw createError({ statusCode: 401, statusMessage: 'Not authorized' });\n});\n```\n\nWe can then define the `NUXT_BASIC_AUTH` environment variable to enable authentication where we need it.\n\nWe can define multiple credentials by putting each one on a different line:\n\n```sh\nNUXT_BASIC_AUTH=\"user1:pass1\\nuser2:pass2\"\n```\n\n---\n\nWe currently enable the middelware by injecting the file in our build pipelines, but we plan to migrate it to a [module](https://nuxt.com/docs/guide/directory-structure/modules). This will allow us to inject it whereever the `NUXT_BASIC_AUTH` environment variable is defined.","src/content/notes/2023/03/10/basic-auth-middleware-nuxt-3.md","e4a2d8ee071638e8",{"html":166,"metadata":167},"\u003Ch1 id=\"a-simple-basic-auth-middleware-for-nuxt-3\">\u003Ca href=\"#a-simple-basic-auth-middleware-for-nuxt-3\">A simple Basic Auth middleware for Nuxt 3\u003C/a>\u003C/h1>\n\u003Cdiv class=\"tracking-wide uppercase opacity-70\">\u003Csmall>10/03/2023 in #Vue #Nuxt\u003C/small>\u003C/div>\n\u003Cp>We often find ourselves needing to protect the access to development environment to avoid unwanted visitors. We use the \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#basic_authentication_scheme\">Basic authentication scheme\u003C/a>, which is quite simple to configure when working with an Apache server.\u003C/p>\n\u003Cp>For our Nuxt 3 projects, we implemented this feature with a simple \u003Ca href=\"https://nuxt.com/docs/guide/directory-structure/server#server-middleware\">server middleware\u003C/a> and a \u003Ca href=\"https://nuxt.com/docs/guide/going-further/runtime-config\">runtime config\u003C/a> to define the valid credentials.\u003C/p>\n\u003Cp>\u003Cstrong>nuxt.config.ts\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#B392F0\"> defineNuxtConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  runtimeConfig: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    basicAuth: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>server/middleware/basic-auth.ts\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { appendHeader, createError, getHeader } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'h3'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> mapCredentialsToBasicAuthHeaders\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">multipleCredentials\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> multipleCredentials.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">credentials\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `Basic ${\u003C/span>\u003Cspan style=\"color:#B392F0\">btoa\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#E1E4E8\">credentials\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#B392F0\"> defineEventHandler\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">basicAuth\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useRuntimeConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // If `basicAuth` is empty, do not prompt for authentication\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">basicAuth) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Format our credentials to their corresponding header:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // `user:pass` becomes `Basic dXNlcjpwYXNz`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> validAuthHeaders\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> mapCredentialsToBasicAuthHeaders\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(basicAuth);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> authHeader\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> getHeader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(event, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'authorization'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // If the given authentication header is valid, do not prompt for authentication\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (authHeader \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> validAuthHeaders.\u003C/span>\u003Cspan style=\"color:#B392F0\">some\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">validAuthHeader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> validAuthHeader \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> authHeader)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Set the `www-authenticate` header to prompt for authentication\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // The realm attribute can be used to customize the message shown to the user\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  appendHeader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(event, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'www-authenticate'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Basic realm=\"Identification\"'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  throw\u003C/span>\u003Cspan style=\"color:#B392F0\"> createError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ statusCode: \u003C/span>\u003Cspan style=\"color:#79B8FF\">401\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, statusMessage: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Not authorized'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We can then define the \u003Ccode>NUXT_BASIC_AUTH\u003C/code> environment variable to enable authentication where we need it.\u003C/p>\n\u003Cp>We can define multiple credentials by putting each one on a different line:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">NUXT_BASIC_AUTH\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"user1:pass1\\nuser2:pass2\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Cp>We currently enable the middelware by injecting the file in our build pipelines, but we plan to migrate it to a \u003Ca href=\"https://nuxt.com/docs/guide/directory-structure/modules\">module\u003C/a>. This will allow us to inject it whereever the \u003Ccode>NUXT_BASIC_AUTH\u003C/code> environment variable is defined.\u003C/p>",{"headings":168,"localImagePaths":171,"remoteImagePaths":172,"frontmatter":173,"imagePaths":174},[169],{"depth":131,"slug":170,"text":160},"a-simple-basic-auth-middleware-for-nuxt-3",[],[],{"title":160,"description":161},[],"2023/03/10/basic-auth-middleware-nuxt-3.md","links",["Map",178,179,195,196,211,212,227,228,243,244,259,260],"9999/studiometa-js-toolkit",{"id":178,"data":180,"filePath":183,"digest":184,"rendered":185,"legacyId":194},{"title":181,"link":182},"🔧 @studiometa/js-toolkit, a small data-attributes driven JavaScript framework","https://js-toolkit.studiometa.dev","src/content/links/9999/@studiometa-js-toolkit.md","1a285b3ec6950b50",{"html":186,"metadata":187},"",{"headings":188,"localImagePaths":189,"remoteImagePaths":190,"frontmatter":191,"imagePaths":193},[],[],[],{"title":181,"link":182,"tags":192},"package, dev, js-toolkit, js, framework",[],"9999/@studiometa-js-toolkit.md","9999/studiometa-ui",{"id":195,"data":197,"filePath":200,"digest":201,"rendered":202,"legacyId":210},{"title":198,"link":199},"📦 @studiometa/ui, a UI components library powered by Twig and Tailwind CSS","https://ui.studiometa.dev","src/content/links/9999/@studiometa-ui.md","cea8279588e01173",{"html":186,"metadata":203},{"headings":204,"localImagePaths":205,"remoteImagePaths":206,"frontmatter":207,"imagePaths":209},[],[],[],{"title":198,"link":199,"tags":208},"package, dev, ui, twig, tailwind, js",[],"9999/@studiometa-ui.md","9999/studiometa-vue-mapbox-gl",{"id":211,"data":213,"filePath":216,"digest":217,"rendered":218,"legacyId":226},{"title":214,"link":215},"🗺 @studiometa/vue-mapbox-gl, a library of Vue 3 components for mapbox-gl","https://vue-mapbox-gl.studiometa.dev","src/content/links/9999/@studiometa-vue-mapbox-gl.md","98871932407e253d",{"html":186,"metadata":219},{"headings":220,"localImagePaths":221,"remoteImagePaths":222,"frontmatter":223,"imagePaths":225},[],[],[],{"title":214,"link":215,"tags":224},"package, dev, vue-mapbox-gl, vue, mapbox-gl, map",[],"9999/@studiometa-vue-mapbox-gl.md","2022/09/git-ship-show-ask",{"id":227,"data":229,"filePath":232,"digest":233,"rendered":234,"legacyId":242},{"title":230,"link":231},"Ship / Show / Ask, A modern branching strategy","https://martinfowler.com/articles/ship-show-ask.html","src/content/links/2022/09/git-ship-show-ask.md","8ceb1a5c7a0255e0",{"html":186,"metadata":235},{"headings":236,"localImagePaths":237,"remoteImagePaths":238,"frontmatter":239,"imagePaths":241},[],[],[],{"title":230,"link":231,"tags":240},"git",[],"2022/09/git-ship-show-ask.md","2023/03/shell-script-best-practices",{"id":243,"data":245,"filePath":248,"digest":249,"rendered":250,"legacyId":258},{"title":246,"link":247},"Shell Script Best Practices","https://sharats.me/posts/shell-script-best-practices/","src/content/links/2023/03/shell-script-best-practices.md","6630a36f8afb9a2c",{"html":186,"metadata":251},{"headings":252,"localImagePaths":253,"remoteImagePaths":254,"frontmatter":255,"imagePaths":257},[],[],[],{"title":246,"link":247,"tags":256},"shell, bash, script",[],"2023/03/shell-script-best-practices.md","2022/06/one-line-csv-operations",{"id":259,"data":261,"filePath":264,"digest":265,"rendered":266,"legacyId":274},{"title":262,"link":263},"One-liner for running queries against CSV files with SQLite","https://til.simonwillison.net/sqlite/one-line-csv-operations","src/content/links/2022/06/one-line-csv-operations.md","a45be1d10bf3b1e0",{"html":186,"metadata":267},{"headings":268,"localImagePaths":269,"remoteImagePaths":270,"frontmatter":271,"imagePaths":273},[],[],[],{"title":262,"link":263,"tags":272},"csv,sqlite,cli",[],"2022/06/one-line-csv-operations.md"]